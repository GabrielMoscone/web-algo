import http from 'k6/http';
import { check, sleep } from 'k6';

const NGINX_STATUS_URL = 'http://nginx/nginx_status';

export const options = {
  scenarios: {
    metrics_check: {
      executor: 'shared-iterations',
      vus: 1,
      iterations: 1,
    },
  },
};

export default function () {
  console.log('\n========================================================');
  console.log('         VALIDA√á√ÉO DE M√âTRICAS DO NGINX');
  console.log('========================================================\n');
  
  // 1. Verificar se endpoint de status est√° acess√≠vel
  console.log('1Ô∏è‚É£  Verificando endpoint nginx_status...');
  const statusResponse = http.get(NGINX_STATUS_URL);
  
  const statusCheck = check(statusResponse, {
    'Nginx status acess√≠vel': (r) => r.status === 200,
    'Cont√©m active connections': (r) => r.body.includes('Active connections'),
    'Cont√©m server accepts': (r) => r.body.includes('server accepts'),
    'Cont√©m reading/writing/waiting': (r) => r.body.includes('Reading') && r.body.includes('Writing'),
  });

  if (statusCheck) {
    console.log('   ‚úÖ Nginx status endpoint funcionando\n');
    console.log('   üìä M√©tricas dispon√≠veis:');
    console.log('   ' + statusResponse.body.split('\n').join('\n   '));
    console.log('');
  } else {
    console.log('   ‚ùå Nginx status endpoint com problemas\n');
  }

  sleep(1);

  // 2. Verificar se nginx-exporter est√° funcionando
  console.log('2Ô∏è‚É£  Verificando Nginx Prometheus Exporter...');
  const exporterResponse = http.get('http://nginx-exporter:9113/metrics');
  
  const exporterCheck = check(exporterResponse, {
    'Nginx exporter acess√≠vel': (r) => r.status === 200,
    'M√©tricas Prometheus dispon√≠veis': (r) => r.body.includes('nginx_'),
    'M√©trica de conex√µes': (r) => r.body.includes('nginx_connections_active'),
    'M√©trica de requests': (r) => r.body.includes('nginx_http_requests_total'),
  });

  if (exporterCheck) {
    console.log('   ‚úÖ Nginx Prometheus Exporter funcionando\n');
    
    // Extrair algumas m√©tricas importantes
    const lines = exporterResponse.body.split('\n');
    console.log('   üìà M√©tricas principais do Nginx:');
    lines.forEach(line => {
      if (line.includes('nginx_connections_active') ||
          line.includes('nginx_http_requests_total') ||
          line.includes('nginx_connections_accepted')) {
        if (!line.startsWith('#')) {
          console.log(`      ${line}`);
        }
      }
    });
    console.log('');
  } else {
    console.log('   ‚ùå Nginx exporter com problemas\n');
  }

  sleep(1);

  // 3. Verificar se Prometheus est√° coletando m√©tricas
  console.log('3Ô∏è‚É£  Verificando coleta de m√©tricas no Prometheus...');
  const promResponse = http.get('http://prometheus:9090/api/v1/query?query=nginx_connections_active');
  
  const promCheck = check(promResponse, {
    'Prometheus acess√≠vel': (r) => r.status === 200,
    'Prometheus tem dados do Nginx': (r) => {
      try {
        const data = JSON.parse(r.body);
        return data.data && data.data.result && data.data.result.length > 0;
      } catch {
        return false;
      }
    },
  });

  if (promCheck) {
    console.log('   ‚úÖ Prometheus coletando m√©tricas do Nginx\n');
    try {
      const data = JSON.parse(promResponse.body);
      if (data.data && data.data.result && data.data.result.length > 0) {
        console.log('   üìä √öltimos valores coletados:');
        data.data.result.forEach((result, idx) => {
          console.log(`      [${idx + 1}] ${result.metric.__name__}: ${result.value[1]}`);
        });
        console.log('');
      }
    } catch (e) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel parsear resposta do Prometheus');
    }
  } else {
    console.log('   ‚ùå Prometheus n√£o est√° coletando dados do Nginx\n');
  }

  sleep(1);

  // 4. Verificar cAdvisor
  console.log('4Ô∏è‚É£  Verificando cAdvisor (m√©tricas de containers)...');
  const cadvisorResponse = http.get('http://cadvisor:8080/metrics');
  
  const cadvisorCheck = check(cadvisorResponse, {
    'cAdvisor acess√≠vel': (r) => r.status === 200,
    'M√©tricas de container dispon√≠veis': (r) => r.body.includes('container_cpu'),
  });

  if (cadvisorCheck) {
    console.log('   ‚úÖ cAdvisor funcionando - m√©tricas de CPU/Mem√≥ria dispon√≠veis\n');
  } else {
    console.log('   ‚ùå cAdvisor com problemas\n');
  }

  console.log('========================================================');
  console.log('                      RESUMO');
  console.log('========================================================\n');
  
  if (statusCheck && exporterCheck && promCheck && cadvisorCheck) {
    console.log('üéâ TUDO OK! Stack de monitoramento est√° funcionando perfeitamente\n');
  } else {
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Alguns componentes precisam de aten√ß√£o\n');
  }
  
  console.log('üìä Acesse os pain√©is:');
  console.log('   ‚Ä¢ Grafana:    http://localhost:3000 (admin/admin)');
  console.log('   ‚Ä¢ Prometheus: http://localhost:9090');
  console.log('   ‚Ä¢ cAdvisor:   http://localhost:8082');
  console.log('');
  console.log('üí° Dashboards recomendados no Grafana:');
  console.log('   ‚Ä¢ Docker and System Monitoring (ID: 893)');
  console.log('   ‚Ä¢ Nginx Metrics (ID: 12708)');
  console.log('   ‚Ä¢ K6 Load Testing Results (ID: 2587)');
  console.log('\n========================================================\n');
}
