name: AKS CI/CD (build -> ACR -> deploy)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: webalgo-rg
  AZURE_AKS_NAME: webalgo-aks
  AZURE_AKS_NAMESPACE: webalgo
  ACR_LOGIN_SERVER: webalgoacr.azurecr.io
  MIDDLEWARE_IMAGE: middleware
  NGINX_IMAGE: nginx-webalgo

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # Login no Azure via OpenID Connect (recomendado)
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Login no ACR
      - name: Login no ACR
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER%%.* }}

      # Setup Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build e push middleware
      - name: Build e push Middleware
        uses: docker/build-push-action@v6
        with:
          context: ./middleware
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.MIDDLEWARE_IMAGE }}:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.MIDDLEWARE_IMAGE }}:latest

      # Build e push nginx
      - name: Build e push NGINX
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.NGINX_IMAGE }}:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.NGINX_IMAGE }}:latest

      # Instalar kubectl
      - name: Instalar kubectl
        uses: azure/setup-kubectl@v4

      # Setar contexto do AKS
      - name: Setar contexto do AKS
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AZURE_AKS_NAME }}

      # Criar namespace se não existir
      - name: Criar namespace se não existir
        run: |
          kubectl get ns ${{ env.AZURE_AKS_NAMESPACE }} || \
          kubectl apply -f k8s/namespace.yaml

      # Aplicar ConfigMap
      - name: Aplicar ConfigMap
        run: kubectl apply -f k8s/configmap.yaml

      # Deploy middleware
      - name: Deploy Middleware
        uses: Azure/k8s-deploy@v5
        with:
          namespace: ${{ env.AZURE_AKS_NAMESPACE }}
          manifests: |
            k8s/middleware-deployment.yaml
          images: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.MIDDLEWARE_IMAGE }}:${{ github.sha }}

      # Deploy nginx
      - name: Deploy NGINX
        uses: Azure/k8s-deploy@v5
        with:
          namespace: ${{ env.AZURE_AKS_NAMESPACE }}
          manifests: |
            k8s/nginx-deployment.yaml
          images: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.NGINX_IMAGE }}:${{ github.sha }}
