user nginx;

worker_processes auto;
worker_rlimit_nofile 65535;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 4096;
  use epoll;
  
  multi_accept on;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  
  # ===== OTIMIZAÇÕES DE PERFORMANCE =====
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  
  # Timeouts otimizados
  keepalive_timeout 65;
  keepalive_requests 100;
  client_body_timeout 12;
  client_header_timeout 12;
  send_timeout 10;
  
  # Buffers otimizados
  client_body_buffer_size 128k;
  client_max_body_size 10m;
  client_header_buffer_size 1k;
  large_client_header_buffers 4 8k;
  
  # Compressão
  gzip on;
  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss;

  # Detecta sessão pelo cookie "sessionid"
  map $http_cookie $has_session {
    default 0;
    "~*sessionid=" 1;
  }

  # ===== UPSTREAM COM ROUND-ROBIN =====
  upstream backend_cluster {
    # Round-robin (padrão) - distribui igualmente entre os servidores
    
    # Health check e failover
    server middleware1:8080 max_fails=3 fail_timeout=30s weight=1;
    server middleware2:8080 max_fails=3 fail_timeout=30s weight=1;
    
    # Keepalive connections
    keepalive 128;
    keepalive_timeout 60s;
    keepalive_requests 1000;
  }

  server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index login.html index.html;
    
    absolute_redirect off;

  # Raiz: se tem sessão vai pro index; senão, vai para login
  location = / {
    if ($has_session) { return 302 /index.html; }
    return 302 /login.html;
  }

  # Protege SOMENTE o index.html, exigindo sessão
  location = /index.html {
    if ($has_session = 0) { return 302 /login.html; }
    add_header Cache-Control "no-store";
    try_files $uri =404;
  }

  # Arquivos públicos e rotas “bonitas” (ex.: /login -> login.html)
  location / {
    add_header Cache-Control "no-store";
    try_files $uri $uri.html $uri/ =404;
  }

    # ===== PROXY PARA API (OTIMIZADO) =====
    location /api/ {
      proxy_pass http://backend_cluster;
      proxy_http_version 1.1;
      
      # Reutilizar conexões (CRÍTICO para performance)
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      
      # Timeouts
      proxy_connect_timeout 10s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
      
      # Buffers
      proxy_buffering on;
      proxy_buffer_size 8k;
      proxy_buffers 32 8k;
      proxy_busy_buffers_size 16k;
      
      # Retry em caso de erro
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
      proxy_next_upstream_tries 2;
      proxy_next_upstream_timeout 5s;
      
      # Desabilitar buffering de requisições grandes
      proxy_request_buffering off;
    }
    
    # MÉTRICAS DO NGINX (scrape pelo nginx-exporter)
    location /nginx_status {
      stub_status;
      access_log off;
      allow 127.0.0.1;
      allow 172.16.0.0/12;  # rede docker default
      deny all;
    }
  }
  
  log_format simple '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_time';
  access_log /dev/stdout simple;
  error_log  /dev/stderr warn;
}
